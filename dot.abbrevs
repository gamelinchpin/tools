;;-*-coding: emacs-mule;-*-
(define-abbrev-table 'antlr-mode-abbrev-table '(
    ))

(define-abbrev-table 'apropos-mode-abbrev-table '(
    ))

(define-abbrev-table 'asm-mode-abbrev-table '(
    ))

(define-abbrev-table 'awk-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'bib-mode-abbrev-table '(
    ))

(define-abbrev-table 'bsh-script-mode-abbrev-table '(
    ))

(define-abbrev-table 'c++-mode-abbrev-table '(
    ("catch" "catch" c-electric-continued-statement 0)
    ("doxb" "<b></b>" (lambda nil nil (backward-char 4)) 0)
    ("doxem" "<em></em>" (lambda nil nil (backward-char 5)) 0)
    ("doxtt" "<tt></tt>" (lambda nil nil (backward-char 5)) 2)
    ("doxyc" " // Class/Namespace
 /**
  * Short Descr.
  *
  * Long Descr.
  */" nil 0)
    ("doxyl" "     /**
      *
      */" nil 0)
    ("doxym" "     /// Short
     /**
      * Long
      */" nil 4)
    ("else" "else" c-electric-continued-statement 6)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'c-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 1)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'cfengine-mode-abbrev-table '(
    ))

(define-abbrev-table 'change-log-mode-abbrev-table '(
    ))

(define-abbrev-table 'checkdoc-output-mode-abbrev-table '(
    ))

(define-abbrev-table 'comint-mode-abbrev-table '(
    ))

(define-abbrev-table 'conf-colon-mode-abbrev-table '(
    ))

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '(
    ))

(define-abbrev-table 'conf-ppd-mode-abbrev-table '(
    ))

(define-abbrev-table 'conf-space-mode-abbrev-table '(
    ))

(define-abbrev-table 'conf-unix-mode-abbrev-table '(
    ))

(define-abbrev-table 'conf-windows-mode-abbrev-table '(
    ))

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '(
    ))

(define-abbrev-table 'cvs-mode-abbrev-table '(
    ))

(define-abbrev-table 'cvs-status-mode-abbrev-table '(
    ))

(define-abbrev-table 'delphi-mode-abbrev-table '(
    ))

(define-abbrev-table 'diff-mode-abbrev-table '(
    ))

(define-abbrev-table 'dsssl-mode-abbrev-table '(
    ))

(define-abbrev-table 'edebug-eval-mode-abbrev-table '(
    ))

(define-abbrev-table 'ee-mode-abbrev-table '(
    ))

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '(
    ))

(define-abbrev-table 'erc-mode-abbrev-table '(
    ))

(define-abbrev-table 'eshell-mode-abbrev-table '(
    ))

(define-abbrev-table 'f90-mode-abbrev-table '(
    ("`ab" "allocatable" nil 0)
    ("`al" "allocate" nil 0)
    ("`as" "assignment" nil 0)
    ("`ba" "backspace" nil 0)
    ("`bd" "block data" nil 0)
    ("`c" "character" nil 0)
    ("`cl" "close" nil 0)
    ("`cm" "common" nil 0)
    ("`cn" "contains" nil 0)
    ("`cx" "complex" nil 0)
    ("`cy" "cycle" nil 0)
    ("`de" "deallocate" nil 0)
    ("`df" "define" nil 0)
    ("`di" "dimension" nil 0)
    ("`dw" "do while" nil 0)
    ("`el" "else" nil 0)
    ("`eli" "else if" nil 0)
    ("`elw" "elsewhere" nil 0)
    ("`eq" "equivalence" nil 0)
    ("`ex" "external" nil 0)
    ("`ey" "entry" nil 0)
    ("`fa" ".false." nil 0)
    ("`fl" "forall" nil 0)
    ("`fo" "format" nil 0)
    ("`fu" "function" nil 0)
    ("`i" "integer" nil 0)
    ("`if" "interface" nil 0)
    ("`im" "implicit none" nil 0)
    ("`in" "include" nil 0)
    ("`it" "intent" nil 0)
    ("`lo" "logical" nil 0)
    ("`mo" "module" nil 0)
    ("`na" "namelist" nil 0)
    ("`nu" "nullify" nil 0)
    ("`op" "optional" nil 0)
    ("`pa" "parameter" nil 0)
    ("`pi" "private" nil 0)
    ("`pm" "program" nil 0)
    ("`po" "pointer" nil 0)
    ("`pr" "print" nil 0)
    ("`pu" "public" nil 0)
    ("`r" "real" nil 0)
    ("`rc" "recursive" nil 0)
    ("`rt" "return" nil 0)
    ("`rw" "rewind" nil 0)
    ("`se" "select" nil 0)
    ("`sq" "sequence" nil 0)
    ("`su" "subroutine" nil 0)
    ("`t" "type" nil 0)
    ("`ta" "target" nil 0)
    ("`tr" ".true." nil 0)
    ("`wh" "where" nil 0)
    ("`wr" "write" nil 0)
    ))

(define-abbrev-table 'fortran-mode-abbrev-table '(
    (";au" "automatic" nil 0)
    (";b" "byte" nil 0)
    (";bd" "block data" nil 0)
    (";c" "continue" nil 0)
    (";ch" "character" nil 0)
    (";cl" "close" nil 0)
    (";cm" "common" nil 0)
    (";cx" "complex" nil 0)
    (";dc" "double complex" nil 0)
    (";df" "define" nil 0)
    (";di" "dimension" nil 0)
    (";do" "double" nil 0)
    (";dp" "double precision" nil 0)
    (";dw" "do while" nil 0)
    (";e" "else" nil 0)
    (";ed" "enddo" nil 0)
    (";el" "elseif" nil 0)
    (";en" "endif" nil 0)
    (";eq" "equivalence" nil 0)
    (";ew" "endwhere" nil 0)
    (";ex" "external" nil 0)
    (";ey" "entry" nil 0)
    (";f" "format" nil 0)
    (";fa" ".false." nil 0)
    (";fu" "function" nil 0)
    (";g" "goto" nil 0)
    (";ib" "implicit byte" nil 0)
    (";ic" "implicit complex" nil 0)
    (";ich" "implicit character" nil 0)
    (";ii" "implicit integer" nil 0)
    (";il" "implicit logical" nil 0)
    (";im" "implicit" nil 0)
    (";in" "integer" nil 0)
    (";inc" "include" nil 0)
    (";intr" "intrinsic" nil 0)
    (";ir" "implicit real" nil 0)
    (";l" "logical" nil 0)
    (";n" "namelist" nil 0)
    (";o" "open" nil 0)
    (";p" "print" nil 0)
    (";pa" "parameter" nil 0)
    (";pr" "program" nil 0)
    (";ps" "pause" nil 0)
    (";r" "read" nil 0)
    (";rc" "record" nil 0)
    (";re" "real" nil 0)
    (";rt" "return" nil 0)
    (";rw" "rewind" nil 0)
    (";s" "stop" nil 0)
    (";sa" "save" nil 0)
    (";sc" "static" nil 0)
    (";st" "structure" nil 0)
    (";su" "subroutine" nil 0)
    (";tr" ".true." nil 0)
    (";ty" "type" nil 0)
    (";vo" "volatile" nil 0)
    (";w" "write" nil 0)
    (";wh" "where" nil 0)
    ))

(define-abbrev-table 'fundamental-mode-abbrev-table '(
    ))

(define-abbrev-table 'gdb-script-mode-abbrev-table '(
    ))

(define-abbrev-table 'global-abbrev-table '(
    ))

(define-abbrev-table 'gnus-article-edit-mode-abbrev-table '(
    ))

(define-abbrev-table 'grep-mode-abbrev-table '(
    ))

(define-abbrev-table 'gud-mode-abbrev-table '(
    ))

(define-abbrev-table 'html-helper-mode-abbrev-table '(
    ))

(define-abbrev-table 'html-mode-abbrev-table '(
    ))

(define-abbrev-table 'icon-mode-abbrev-table '(
    ))

(define-abbrev-table 'idl-mode-abbrev-table '(
    ))

(define-abbrev-table 'idlwave-mode-abbrev-table '(
    ("\\b" "begin" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("\\c" "" (lambda nil "(idlwave-case)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-case))) 0)
    ("\\cb" "byte()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\cc" "complex()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\cd" "double()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\cf" "float()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\cl" "long()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\co" "common" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("\\cs" "string()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\cx" "fix()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\e" "else" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("\\ec" "endcase" idlwave-show-begin 0)
    ("\\ee" "endelse" idlwave-show-begin 0)
    ("\\ef" "endfor" idlwave-show-begin 0)
    ("\\ei" "endif else if" idlwave-show-begin 0)
    ("\\el" "endif else" idlwave-show-begin 0)
    ("\\elif" "" (lambda nil "(idlwave-elif)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-elif))) 0)
    ("\\en" "endif" idlwave-show-begin 0)
    ("\\er" "endrep" idlwave-show-begin 0)
    ("\\es" "endswitch" idlwave-show-begin 0)
    ("\\ew" "endwhile" idlwave-show-begin 0)
    ("\\f" "" (lambda nil "(idlwave-for)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-for))) 0)
    ("\\fu" "" (lambda nil "(idlwave-function)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-function))) 0)
    ("\\g" "goto," (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("\\h" "help," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\i" "" (lambda nil "(idlwave-if)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-if))) 0)
    ("\\ine" "if n_elements() eq 0 then" (lambda nil (idlwave-check-abbrev 11)) 0)
    ("\\inn" "if n_elements() ne 0 then" (lambda nil (idlwave-check-abbrev 11)) 0)
    ("\\k" "keyword_set()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\n" "n_elements()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\np" "n_params()" (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\oi" "on_ioerror," (lambda nil (idlwave-check-abbrev 0 1)) 0)
    ("\\on" "on_error," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\or" "openr," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\ou" "openu," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\ow" "openw," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\p" "print," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\pr" "" (lambda nil "(idlwave-procedure)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-procedure))) 0)
    ("\\pt" "plot," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\r" "" (lambda nil "(idlwave-repeat)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-repeat))) 0)
    ("\\re" "read," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\rf" "readf," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\rt" "return" (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\ru" "readu," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\s" "size()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\sc" "strcompress()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\sl" "strlowcase()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\sm" "strmid()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\sn" "strlen()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\sp" "strpos()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\sr" "strtrim()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\st" "strput()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\su" "strupcase()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\sw" "" (lambda nil "(idlwave-switch)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-switch))) 0)
    ("\\t" "then" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("\\u" "until" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("\\w" "" (lambda nil "(idlwave-while)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-while))) 0)
    ("\\wc" "widget_control," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("\\wi" "widget_info()" (lambda nil (idlwave-check-abbrev 1)) 0)
    ("\\wu" "writeu," (lambda nil (idlwave-check-abbrev 0)) 0)
    ("and" "and" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("begin" "begin" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("break" "break" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("case" "case" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("common" "common" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("continue" "continue" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("do" "do" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("else" "else" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("end" "end" idlwave-show-begin-check 0)
    ("endcase" "endcase" idlwave-show-begin-check 0)
    ("endelse" "endelse" idlwave-show-begin-check 0)
    ("endfor" "endfor" idlwave-show-begin-check 0)
    ("endif" "endif" idlwave-show-begin-check 0)
    ("endrep" "endrep" idlwave-show-begin-check 0)
    ("endswitch" "endswitch" idlwave-show-begin-check 0)
    ("endwhi" "endwhi" idlwave-show-begin-check 0)
    ("endwhile" "endwhile" idlwave-show-begin-check 0)
    ("eq" "eq" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("for" "for" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("function" "function" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("ge" "ge" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("goto" "goto" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("gt" "gt" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("if" "if" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("le" "le" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("lt" "lt" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("mod" "mod" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("ne" "ne" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("not" "not" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("of" "of" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("on_ioerror" "on_ioerror" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("or" "or" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("pro" "pro" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("repeat" "repeat" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("switch" "switch" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("then" "then" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("until" "until" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("while" "while" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ("xor" "xor" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    ))

(define-abbrev-table 'image-dired-display-image-mode-abbrev-table '(
    ))

(define-abbrev-table 'image-dired-thumbnail-mode-abbrev-table '(
    ))

(define-abbrev-table 'inferior-python-mode-abbrev-table '(
    ))

(define-abbrev-table 'inferior-scheme-mode-abbrev-table '(
    ))

(define-abbrev-table 'inferior-tcl-mode-abbrev-table '(
    ))

(define-abbrev-table 'java-mode-abbrev-table '(
    ("catch" "catch" c-electric-continued-statement 2)
    ("else" "else" c-electric-continued-statement 3)
    ("finally" "finally" c-electric-continued-statement 0)
    ("jdb" "<b></b>" (lambda nil nil (backward-char 4)) 0)
    ("jdblk" "    /**
     *
     */" nil 0)
    ("jdbr" "<br/>" (lambda nil nil (backward-char 3) (do-comment-line-break) (backward-char -3) (do-comment-line-break)) 0)
    ("jdc" "<code></code>" (lambda nil nil (backward-char 7)) 0)
    ("jdem" "<em></em>" (lambda nil nil (backward-char 5)) 0)
    ("jdf" "<tt>false</tt>" nil 0)
    ("jdl" "{@link }" (lambda nil nil (backward-char)) 0)
    ("jdm" "/**
     * Short
     * 
     * <p>Long</p>
     */" nil 2)
    ("jdn" "<tt>null</tt>" nil 0)
    ("jdp" "@param" nil 0)
    ("jdpre" "<pre></pre>" (lambda nil nil (backward-char 6) (do-comment-line-break) (do-comment-line-break) (end-of-line) (previous-line 1)) 0)
    ("jdr" "@return" nil 0)
    ("jds" "@see" nil 0)
    ("jdt" "<tt>true</tt>" nil 0)
    ("jdth" "@throws" nil 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'jde-mode-abbrev-table '(
    ("catch" "catch" c-electric-continued-statement 1)
    ("else" "else" c-electric-continued-statement 1)
    ("finally" "finally" c-electric-continued-statement 0)
    ("jdb" "<b></b>" (lambda nil nil (backward-char 4)) 0)
    ("jdblk" "    /**
     *
     */" nil 0)
    ("jdbr" "<br/>" (lambda nil nil (backward-char 3) (do-comment-line-break) (backward-char -3) (do-comment-line-break)) 0)
    ("jdc" "<code></code>" (lambda nil nil (backward-char 7)) 0)
    ("jdem" "<em></em>" (lambda nil nil (backward-char 5)) 0)
    ("jdf" "<tt>false</tt>" nil 0)
    ("jdl" "{@link }" (lambda nil nil (backward-char)) 0)
    ("jdm" "/**
     * Short
     * 
     * <p>Long</p>
     */" nil 3)
    ("jdn" "<tt>null</tt>" nil 0)
    ("jdp" "@param" nil 0)
    ("jdpre" "<pre></pre>" (lambda nil nil (backward-char 6) (do-comment-line-break) (do-comment-line-break) (end-of-line) (previous-line 1)) 0)
    ("jdr" "@return" nil 0)
    ("jds" "@see" nil 0)
    ("jdt" "<tt>true</tt>" nil 0)
    ("jdth" "@throws" nil 0)
    ("while" "while" c-electric-continued-statement 1)
    ))

(define-abbrev-table 'jde-run-mode-abbrev-table '(
    ))

(define-abbrev-table 'jpw-lj-mode-abbrev-table '(
    ))

(define-abbrev-table 'jython-mode-abbrev-table '(
    ))

(define-abbrev-table 'ld-script-mode-abbrev-table '(
    ))

(define-abbrev-table 'lisp-mode-abbrev-table '(
    ))

(define-abbrev-table 'log-edit-mode-abbrev-table '(
    ))

(define-abbrev-table 'log-view-mode-abbrev-table '(
    ))

(define-abbrev-table 'm4-mode-abbrev-table '(
    ))

(define-abbrev-table 'makefile-automake-mode-abbrev-table '(
    ))

(define-abbrev-table 'makefile-bsdmake-mode-abbrev-table '(
    ))

(define-abbrev-table 'makefile-gmake-mode-abbrev-table '(
    ))

(define-abbrev-table 'makefile-imake-mode-abbrev-table '(
    ))

(define-abbrev-table 'makefile-makepp-mode-abbrev-table '(
    ))

(define-abbrev-table 'makefile-mode-abbrev-table '(
    ))

(define-abbrev-table 'message-mode-abbrev-table '(
    ))

(define-abbrev-table 'meta-mode-abbrev-table '(
    ))

(define-abbrev-table 'newsticker-mode-abbrev-table '(
    ))

(define-abbrev-table 'nroff-mode-abbrev-table '(
    ))

(define-abbrev-table 'objc-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'occur-mode-abbrev-table '(
    ))

(define-abbrev-table 'octave-abbrev-table '(
    ("`a" "all_va_args" nil 0)
    ("`b" "break" nil 0)
    ("`c" "continue" nil 0)
    ("`ca" "catch" nil 0)
    ("`cs" "case" nil 0)
    ("`ef" "endfor" nil 0)
    ("`efu" "endfunction" nil 0)
    ("`ei" "endif" nil 0)
    ("`el" "else" nil 0)
    ("`eli" "elseif" nil 0)
    ("`es" "endswitch" nil 0)
    ("`et" "end_try_catch" nil 0)
    ("`eu" "end_unwind_protect" nil 0)
    ("`ew" "endwhile" nil 0)
    ("`f" "for" nil 0)
    ("`fu" "function" nil 0)
    ("`gl" "global" nil 0)
    ("`gp" "gplot" nil 0)
    ("`gs" "gsplot" nil 0)
    ("`if" "if ()" nil 0)
    ("`o" "otherwise" nil 0)
    ("`r" "return" nil 0)
    ("`rp" "replot" nil 0)
    ("`s" "switch" nil 0)
    ("`t" "try" nil 0)
    ("`up" "unwind_protect" nil 0)
    ("`upc" "unwind_protect_cleanup" nil 0)
    ("`w" "while ()" nil 0)
    ))

(define-abbrev-table 'org-mode-abbrev-table '(
    ))

(define-abbrev-table 'outline-mode-abbrev-table '(
    ))

(define-abbrev-table 'pascal-mode-abbrev-table '(
    ))

(define-abbrev-table 'perl-mode-abbrev-table '(
    ))

(define-abbrev-table 'phpBB-mode-abbrev-table '(
    ))

(define-abbrev-table 'pike-mode-abbrev-table '(
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'prolog-mode-abbrev-table '(
    ))

(define-abbrev-table 'ps-mode-abbrev-table '(
    ))

(define-abbrev-table 'ps-run-mode-abbrev-table '(
    ))

(define-abbrev-table 'python-mode-abbrev-table '(
    ))

(define-abbrev-table 'reb-lisp-mode-abbrev-table '(
    ))

(define-abbrev-table 'rlogin-mode-abbrev-table '(
    ))

(define-abbrev-table 'rpm-spec-mode-abbrev-table '(
    ))

(define-abbrev-table 'scheme-mode-abbrev-table '(
    ))

(define-abbrev-table 'select-tags-table-mode-abbrev-table '(
    ))

(define-abbrev-table 'sgml-mode-abbrev-table '(
    ))

(define-abbrev-table 'sh-mode-abbrev-table '(
    ))

(define-abbrev-table 'shell-mode-abbrev-table '(
    ))

(define-abbrev-table 'sieve-manage-mode-abbrev-table '(
    ))

(define-abbrev-table 'sieve-mode-abbrev-table '(
    ))

(define-abbrev-table 'simula-mode-abbrev-table '(
    ))

(define-abbrev-table 'sql-mode-abbrev-table '(
    ("del" "delete" nil 0)
    ("ins" "insert" nil 0)
    ("sel" "select" nil 0)
    ("upd" "update" nil 0)
    ))

(define-abbrev-table 'svn-log-view-mode-abbrev-table '(
    ))

(define-abbrev-table 'tcl-mode-abbrev-table '(
    ("''" "<tt></tt>" (lambda nil nil (backward-char 5)) 2)
    ("**" "<b></b>" (lambda nil nil (backward-char 4)) 0)
    ("//" "<em></em>" (lambda nil nil (backward-char 5)) 0)
    ("__" "<u></u>" (lambda nil nil (backward-char 4)) 0)
    ))

(define-abbrev-table 'text-mode-abbrev-table '(
    ))

(define-abbrev-table 'thumbs-mode-abbrev-table '(
    ))

(define-abbrev-table 'thumbs-view-image-mode-abbrev-table '(
    ))

(define-abbrev-table 'vc-annotate-mode-abbrev-table '(
    ))

(define-abbrev-table 'vc-dired-mode-abbrev-table '(
    ))

(define-abbrev-table 'vc-log-mode-abbrev-table '(
    ))

(define-abbrev-table 'vhdl-mode-abbrev-table '(
    ("--" "" vhdl-template-display-comment-hook 0)
    ("abs" "" vhdl-template-default-hook 0)
    ("access" "" vhdl-template-default-hook 0)
    ("after" "" vhdl-template-default-hook 0)
    ("alias" "" vhdl-template-alias-hook 0)
    ("all" "" vhdl-template-default-hook 0)
    ("and" "" vhdl-template-default-hook 0)
    ("arch" "" vhdl-template-architecture-hook 0)
    ("architecture" "" vhdl-template-architecture-hook 0)
    ("array" "" vhdl-template-default-hook 0)
    ("assert" "" vhdl-template-assert-hook 0)
    ("attr" "" vhdl-template-attribute-hook 0)
    ("attribute" "" vhdl-template-attribute-hook 0)
    ("begin" "" vhdl-template-default-indent-hook 0)
    ("block" "" vhdl-template-block-hook 0)
    ("body" "" vhdl-template-default-hook 0)
    ("buffer" "" vhdl-template-default-hook 0)
    ("bus" "" vhdl-template-default-hook 0)
    ("case" "" vhdl-template-case-hook 0)
    ("comp" "" vhdl-template-component-hook 0)
    ("component" "" vhdl-template-component-hook 0)
    ("cond" "" vhdl-template-conditional-signal-asst-hook 0)
    ("conditional" "" vhdl-template-conditional-signal-asst-hook 0)
    ("conf" "" vhdl-template-configuration-hook 0)
    ("configuration" "" vhdl-template-configuration-hook 0)
    ("cons" "" vhdl-template-constant-hook 0)
    ("constant" "" vhdl-template-constant-hook 0)
    ("disconnect" "" vhdl-template-disconnect-hook 0)
    ("downto" "" vhdl-template-default-hook 0)
    ("else" "" vhdl-template-else-hook 0)
    ("elseif" "" vhdl-template-elsif-hook 0)
    ("elsif" "" vhdl-template-elsif-hook 0)
    ("end" "" vhdl-template-default-indent-hook 0)
    ("entity" "" vhdl-template-entity-hook 0)
    ("exit" "" vhdl-template-exit-hook 0)
    ("file" "" vhdl-template-file-hook 0)
    ("for" "" vhdl-template-for-hook 0)
    ("func" "" vhdl-template-function-hook 0)
    ("function" "" vhdl-template-function-hook 0)
    ("generic" "" vhdl-template-generic-hook 0)
    ("group" "" vhdl-template-group-hook 0)
    ("guarded" "" vhdl-template-default-hook 0)
    ("if" "" vhdl-template-if-hook 0)
    ("impure" "" vhdl-template-default-hook 0)
    ("in" "" vhdl-template-default-hook 0)
    ("inertial" "" vhdl-template-default-hook 0)
    ("inout" "" vhdl-template-default-hook 0)
    ("inst" "" vhdl-template-instance-hook 0)
    ("instance" "" vhdl-template-instance-hook 0)
    ("is" "" vhdl-template-default-hook 0)
    ("label" "" vhdl-template-default-hook 0)
    ("library" "" vhdl-template-library-hook 0)
    ("linkage" "" vhdl-template-default-hook 0)
    ("literal" "" vhdl-template-default-hook 0)
    ("loop" "" vhdl-template-bare-loop-hook 0)
    ("map" "" vhdl-template-map-hook 0)
    ("mod" "" vhdl-template-default-hook 0)
    ("nand" "" vhdl-template-default-hook 0)
    ("new" "" vhdl-template-default-hook 0)
    ("next" "" vhdl-template-next-hook 0)
    ("nor" "" vhdl-template-default-hook 0)
    ("not" "" vhdl-template-default-hook 0)
    ("null" "" vhdl-template-default-hook 0)
    ("of" "" vhdl-template-default-hook 0)
    ("on" "" vhdl-template-default-hook 0)
    ("open" "" vhdl-template-default-hook 0)
    ("or" "" vhdl-template-default-hook 0)
    ("others" "" vhdl-template-others-hook 0)
    ("out" "" vhdl-template-default-hook 0)
    ("pack" "" vhdl-template-package-hook 0)
    ("package" "" vhdl-template-package-hook 0)
    ("port" "" vhdl-template-port-hook 0)
    ("postponed" "" vhdl-template-default-hook 0)
    ("procedure" "" vhdl-template-procedure-hook 0)
    ("process" "" vhdl-template-process-hook 0)
    ("pure" "" vhdl-template-default-hook 0)
    ("range" "" vhdl-template-default-hook 0)
    ("record" "" vhdl-template-default-hook 0)
    ("register" "" vhdl-template-default-hook 0)
    ("reject" "" vhdl-template-default-hook 0)
    ("rem" "" vhdl-template-default-hook 0)
    ("report" "" vhdl-template-report-hook 0)
    ("return" "" vhdl-template-return-hook 0)
    ("rol" "" vhdl-template-default-hook 0)
    ("ror" "" vhdl-template-default-hook 0)
    ("select" "" vhdl-template-selected-signal-asst-hook 0)
    ("severity" "" vhdl-template-default-hook 0)
    ("shared" "" vhdl-template-default-hook 0)
    ("sig" "" vhdl-template-signal-hook 0)
    ("signal" "" vhdl-template-signal-hook 0)
    ("sla" "" vhdl-template-default-hook 0)
    ("sll" "" vhdl-template-default-hook 0)
    ("sra" "" vhdl-template-default-hook 0)
    ("srl" "" vhdl-template-default-hook 0)
    ("subtype" "" vhdl-template-subtype-hook 0)
    ("then" "" vhdl-template-default-hook 0)
    ("to" "" vhdl-template-default-hook 0)
    ("transport" "" vhdl-template-default-hook 0)
    ("type" "" vhdl-template-type-hook 0)
    ("unaffected" "" vhdl-template-default-hook 0)
    ("units" "" vhdl-template-default-hook 0)
    ("until" "" vhdl-template-default-hook 0)
    ("use" "" vhdl-template-use-hook 0)
    ("var" "" vhdl-template-variable-hook 0)
    ("variable" "" vhdl-template-variable-hook 0)
    ("wait" "" vhdl-template-wait-hook 0)
    ("when" "" vhdl-template-when-hook 0)
    ("while" "" vhdl-template-while-loop-hook 0)
    ("with" "" vhdl-template-with-hook 0)
    ("xnor" "" vhdl-template-default-hook 0)
    ("xor" "" vhdl-template-default-hook 0)
    ))

(define-abbrev-table 'visual-basic-mode-abbrev-table '(
    ("add" "Add" nil 0)
    ("aggregate" "Aggregate" nil 0)
    ("and" "And" nil 0)
    ("app" "App" nil 0)
    ("appactivate" "AppActivate" nil 0)
    ("application" "Application" nil 0)
    ("array" "Array" nil 0)
    ("as" "As" nil 0)
    ("asc" "Asc" nil 0)
    ("ascb" "AscB" nil 0)
    ("atn" "Atn" nil 0)
    ("attribute" "Attribute" nil 0)
    ("beep" "Beep" nil 0)
    ("begin" "Begin" nil 0)
    ("begintrans" "BeginTrans" nil 0)
    ("boolean" "Boolean" nil 0)
    ("byref" "ByRef" nil 0)
    ("byval" "ByVal" nil 0)
    ("call" "Call" nil 0)
    ("case" "Case" nil 0)
    ("cbool" "CBool" nil 0)
    ("cbyte" "CByte" nil 0)
    ("ccur" "CCur" nil 0)
    ("cdate" "CDate" nil 0)
    ("cdbl" "CDbl" nil 0)
    ("character" "Character" nil 0)
    ("chdir" "ChDir" nil 0)
    ("chdrive" "ChDrive" nil 0)
    ("choose" "Choose" nil 0)
    ("chr" "Chr" nil 0)
    ("chrb" "ChrB" nil 0)
    ("cint" "CInt" nil 0)
    ("classmodule" "ClassModule" nil 0)
    ("clipboard" "Clipboard" nil 0)
    ("clng" "CLng" nil 0)
    ("close" "Close" nil 0)
    ("collection" "Collection" nil 0)
    ("column" "Column" nil 0)
    ("columns" "Columns" nil 0)
    ("command" "Command" nil 0)
    ("committrans" "CommitTrans" nil 0)
    ("compactdatabase" "CompactDatabase" nil 0)
    ("component" "Component" nil 0)
    ("components" "Components" nil 0)
    ("const" "Const" nil 0)
    ("container" "Container" nil 0)
    ("containers" "Containers" nil 0)
    ("cos" "Cos" nil 0)
    ("createdatabase" "CreateDatabase" nil 0)
    ("createobject" "CreateObject" nil 0)
    ("csng" "CSng" nil 0)
    ("cstr" "CStr" nil 0)
    ("curdir" "CurDir" nil 0)
    ("currency" "Currency" nil 0)
    ("cvar" "CVar" nil 0)
    ("cverr" "CVErr" nil 0)
    ("data" "Data" nil 0)
    ("database" "Database" nil 0)
    ("databases" "Databases" nil 0)
    ("date" "Date" nil 0)
    ("dateadd" "DateAdd" nil 0)
    ("datediff" "DateDiff" nil 0)
    ("datepart" "DatePart" nil 0)
    ("dateserial" "DateSerial" nil 0)
    ("datevalue" "DateValue" nil 0)
    ("day" "Day" nil 0)
    ("dbengine" "DBEngine" nil 0)
    ("ddb" "DDB" nil 0)
    ("debug" "Debug" nil 0)
    ("declare" "Declare" nil 0)
    ("deftype" "Deftype" nil 0)
    ("deletesetting" "DeleteSetting" nil 0)
    ("dim" "Dim" nil 0)
    ("dir" "Dir" nil 0)
    ("do" "Do" nil 0)
    ("doevents" "DoEvents" nil 0)
    ("domain" "Domain" nil 0)
    ("double" "Double" nil 0)
    ("dynaset" "Dynaset" nil 0)
    ("each" "Each" nil 0)
    ("else" "Else" nil 0)
    ("end" "End" nil 0)
    ("endproperty" "EndProperty" nil 0)
    ("enum" "Enum" nil 0)
    ("environ" "Environ" nil 0)
    ("eof" "EOF" nil 0)
    ("erase" "Erase" nil 0)
    ("err" "Err" nil 0)
    ("error" "Error" nil 0)
    ("exit" "Exit" nil 0)
    ("exp" "Exp" nil 0)
    ("false" "False" nil 0)
    ("field" "Field" nil 0)
    ("fields" "Fields" nil 0)
    ("fileattr" "FileAttr" nil 0)
    ("filecopy" "FileCopy" nil 0)
    ("filedatetime" "FileDateTime" nil 0)
    ("filelen" "FileLen" nil 0)
    ("fix" "Fix" nil 0)
    ("font" "Font" nil 0)
    ("for" "For" nil 0)
    ("form" "Form" nil 0)
    ("format" "Format" nil 0)
    ("forms" "Forms" nil 0)
    ("formtemplate" "FormTemplate" nil 0)
    ("freefile" "FreeFile" nil 0)
    ("freelocks" "FreeLocks" nil 0)
    ("friend" "Friend" nil 0)
    ("function" "Function" nil 0)
    ("fv" "FV" nil 0)
    ("get" "Get" nil 0)
    ("getallsettings" "GetAllSettings" nil 0)
    ("getattr" "GetAttr" nil 0)
    ("getobject" "GetObject" nil 0)
    ("getsetting" "GetSetting" nil 0)
    ("global" "Global" nil 0)
    ("gosub" "GoSub" nil 0)
    ("goto" "GoTo" nil 0)
    ("group" "Group" nil 0)
    ("groups" "Groups" nil 0)
    ("hex" "Hex" nil 0)
    ("hour" "Hour" nil 0)
    ("if" "If" nil 0)
    ("iif" "IIf" nil 0)
    ("imestatus" "IMEStatus" nil 0)
    ("implements" "Implements" nil 0)
    ("input" "Input" nil 0)
    ("instr" "InStr" nil 0)
    ("int" "Int" nil 0)
    ("integer" "Integer" nil 0)
    ("ipmt" "IPmt" nil 0)
    ("irr" "IRR" nil 0)
    ("is" "Is" nil 0)
    ("isarray" "IsArray" nil 0)
    ("isdate" "IsDate" nil 0)
    ("isempty" "IsEmpty" nil 0)
    ("iserror" "IsError" nil 0)
    ("ismissing" "IsMissing" nil 0)
    ("isnull" "IsNull" nil 0)
    ("isnumeric" "IsNumeric" nil 0)
    ("isobject" "IsObject" nil 0)
    ("kill" "Kill" nil 0)
    ("lbound" "LBound" nil 0)
    ("lcase" "LCase" nil 0)
    ("left" "Left" nil 0)
    ("len" "Len" nil 0)
    ("let" "Let" nil 0)
    ("like" "Like" nil 0)
    ("line" "Line" nil 0)
    ("load" "Load" nil 0)
    ("loadpicture" "LoadPicture" nil 0)
    ("loadresdata" "LoadResData" nil 0)
    ("loadrespicture" "LoadResPicture" nil 0)
    ("loadresstring" "LoadResString" nil 0)
    ("loc" "Loc" nil 0)
    ("lock" "Lock" nil 0)
    ("lof" "LOF" nil 0)
    ("log" "Log" nil 0)
    ("long" "Long" nil 0)
    ("loop" "Loop" nil 0)
    ("lset" "LSet" nil 0)
    ("ltrim" "LTrim" nil 0)
    ("mdiform" "MDIForm" nil 0)
    ("me" "Me" nil 0)
    ("menuitems" "MenuItems" nil 0)
    ("menuline" "MenuLine" nil 0)
    ("mid" "Mid" nil 0)
    ("minute" "Minute" nil 0)
    ("mirr" "MIRR" nil 0)
    ("mkdir" "MkDir" nil 0)
    ("month" "Month" nil 0)
    ("msgbox" "MsgBox" nil 0)
    ("name" "Name" nil 0)
    ("new" "New" nil 0)
    ("next" "Next" nil 0)
    ("not" "Not" nil 0)
    ("nothing" "Nothing" nil 0)
    ("now" "Now" nil 0)
    ("nper" "NPer" nil 0)
    ("npv" "NPV" nil 0)
    ("object" "Object" nil 0)
    ("oct" "Oct" nil 0)
    ("on" "On" nil 0)
    ("open" "Open" nil 0)
    ("opendatabase" "OpenDatabase" nil 0)
    ("operator" "Operator" nil 0)
    ("option" "Option" nil 0)
    ("optional" "Optional" nil 0)
    ("or" "Or" nil 0)
    ("parameter" "Parameter" nil 0)
    ("parameters" "Parameters" nil 0)
    ("partition" "Partition" nil 0)
    ("picture" "Picture" nil 0)
    ("pmt" "Pmt" nil 0)
    ("ppmt" "PPmt" nil 0)
    ("print" "Print" nil 0)
    ("printer" "Printer" nil 0)
    ("printers" "Printers" nil 0)
    ("private" "Private" nil 0)
    ("projecttemplate" "ProjectTemplate" nil 0)
    ("properties" "Properties" nil 0)
    ("property" "Property" nil 0)
    ("public" "Public" nil 0)
    ("put" "Put" nil 0)
    ("pv" "PV" nil 0)
    ("qbcolor" "QBColor" nil 0)
    ("querydef" "QueryDef" nil 0)
    ("querydefs" "QueryDefs" nil 0)
    ("randomize" "Randomize" nil 0)
    ("rate" "Rate" nil 0)
    ("recordset" "Recordset" nil 0)
    ("recordsets" "Recordsets" nil 0)
    ("redim" "ReDim" nil 0)
    ("registerdatabase" "RegisterDatabase" nil 0)
    ("relation" "Relation" nil 0)
    ("relations" "Relations" nil 0)
    ("rem" "Rem" nil 0)
    ("repairdatabase" "RepairDatabase" nil 0)
    ("reset" "Reset" nil 0)
    ("resume" "Resume" nil 0)
    ("return" "Return" nil 0)
    ("right" "Right" nil 0)
    ("rmdir" "RmDir" nil 0)
    ("rnd" "Rnd" nil 0)
    ("rollback" "Rollback" nil 0)
    ("rowbuffer" "RowBuffer" nil 0)
    ("rset" "RSet" nil 0)
    ("rtrim" "RTrim" nil 0)
    ("savepicture" "SavePicture" nil 0)
    ("savesetting" "SaveSetting" nil 0)
    ("screen" "Screen" nil 0)
    ("second" "Second" nil 0)
    ("seek" "Seek" nil 0)
    ("selbookmarks" "SelBookmarks" nil 0)
    ("select" "Select" nil 0)
    ("selectedcomponents" "SelectedComponents" nil 0)
    ("sendkeys" "SendKeys" nil 0)
    ("set" "Set" nil 0)
    ("setattr" "SetAttr" nil 0)
    ("setdataaccessoption" "SetDataAccessOption" nil 0)
    ("setdefaultworkspace" "SetDefaultWorkspace" nil 0)
    ("sgn" "Sgn" nil 0)
    ("shell" "Shell" nil 0)
    ("sin" "Sin" nil 0)
    ("single" "Single" nil 0)
    ("sln" "SLN" nil 0)
    ("snapshot" "Snapshot" nil 0)
    ("space" "Space" nil 0)
    ("spc" "Spc" nil 0)
    ("sqr" "Sqr" nil 0)
    ("static" "Static" nil 0)
    ("step" "Step" nil 0)
    ("stop" "Stop" nil 0)
    ("str" "Str" nil 0)
    ("strcomp" "StrComp" nil 0)
    ("strconv" "StrConv" nil 0)
    ("string" "String" nil 0)
    ("sub" "Sub" nil 0)
    ("submenu" "SubMenu" nil 0)
    ("switch" "Switch" nil 0)
    ("syd" "SYD" nil 0)
    ("tab" "Tab" nil 0)
    ("table" "Table" nil 0)
    ("tabledef" "TableDef" nil 0)
    ("tabledefs" "TableDefs" nil 0)
    ("tan" "Tan" nil 0)
    ("then" "Then" nil 0)
    ("time" "Time" nil 0)
    ("timer" "Timer" nil 0)
    ("timeserial" "TimeSerial" nil 0)
    ("timevalue" "TimeValue" nil 0)
    ("to" "To" nil 0)
    ("trim" "Trim" nil 0)
    ("true" "True" nil 0)
    ("type" "Type" nil 0)
    ("typename" "TypeName" nil 0)
    ("ubound" "UBound" nil 0)
    ("ucase" "UCase" nil 0)
    ("unload" "Unload" nil 0)
    ("unlock" "Unlock" nil 0)
    ("val" "Val" nil 0)
    ("variant" "Variant" nil 0)
    ("vartype" "VarType" nil 0)
    ("verb" "Verb" nil 0)
    ("weekday" "Weekday" nil 0)
    ("wend" "Wend" nil 0)
    ("while" "While" nil 0)
    ("width" "Width" nil 0)
    ("with" "With" nil 0)
    ("workspace" "Workspace" nil 0)
    ("workspaces" "Workspaces" nil 0)
    ("write" "Write" nil 0)
    ("year" "Year" nil 0)
    ))

(define-abbrev-table 'wikipedia-mode-abbrev-table '(
    ))

