!
!     Perforce Identifier : $Id: //depot/EXPRESS/FIX/branches/v5.2/XpFix/src/cfg/xpfix_FixInExprs.cfg#1 $
!     System              : fidessa Express
!     Sub-System          : FIX Node RDS Client Configuration
!     Copyright           : (c) royalblue financial plc 2004
!     Date                : 29h January 2004
!
!     Function            : Inbound FIX message xlation fieldExprs
!                           Configuration
! 
!     Modification History
! 
!     Date                : 29h January 2004
!     CRF                 : FIX00071s
!     Changes             : New file
! 
!     Date                : 29th January 2004
!     CRF                 : FIX00071s
!     Changes             : Tidy up and templating added
! 
!     Date                : 17th February 2004
!     CRF                 : EXPRESS00223s
!     Changes             : Moving from fixxp_ to xpfix_
!
!     Date                : 2nd April 2004
!     CRF                 : XPFIX00322s
!     Changes             : Added configuration parameter skipMsgXLateExpr to
!                           allow message validation and conversion to be
!                           skipped
!
!     Date                : 13th April 2004
!     CRF                 : XPFIX00325s
!     Changes             : Added included 'expression' blocks from both
!                           xpfix_FixInExprs.cfg and xpfix_FixOutExprs.cfg
!                           files to allow XRef's to be easily used.
!
!     Date                : 
!     CRF                 : 
!     Changes             : 
!
!
!     On-Site Modification History
!
!     Date                : 10th August 2005
!     CRF                 : TT10134
!     Author              : John Weiss
!     Changes             : Adding custom field expression processing for 
!                         : incoming  'Cancel' ExecutionRequest with a nonzero
!                         : LastShares value.  Such messages (e.g. unsolicited
!                         : partial cancels or busts) are treated as errors by
!                         : the RDSCLI binary.
!                         : Unfortunately, ITG Canada sends the quantity from
!                         : the fill being cancelled in the LastShares field.
!                         : So, we need to accept these messages, repairing
!                         : fields we'd usually consider "broken."
!
!     Date                : 12th August 2005
!     CRF                 : TT10134
!     Author              : John Weiss/Nevin Patton
!     Changes             : 1. ExecutionId
!                         :  Prepend TradeDate and append TradeType to
!                         :  ExecutionId to ensure uniqueness of tradeId from
!                         :  day to day.
!                         :  Shamelessly purloined from Nevin Patton's
!                         :  XP2_ARCA version of this file.
!                         : 2. Canadian Symbology
!                         :  Added expressions and function to reassemble
!                         :  instrument names into the form expected by OMAR,
!                         :  FTS, et. al., for Canadian instruments.
!
!     Date                : 
!     CRF                 : 
!     Author              : 
!     Changes             : 
!


fieldExprs
{
    fieldExprs 
    (
      ! Translator for Execution-unnotify with nonzero LastShares.
      !
      ! All other fieldExprs MUST follow this one.
      !
      "If
       (
         rds.FIX_IN_QUEUE[0].MESSAGE.35.s == '8' &&
         rds.FIX_IN_QUEUE[0].MESSAGE.20.s == '1' && 
         rds.FIX_IN_QUEUE[0].MESSAGE.32.s != '0'
       ,
         txn.XP_DATA.EVENT.EVENT_TYPE.s = 'Execution-unnotify';
         txn.XP_DATA.DETAILS.EXECUTION_QUANTITY.f64 = 0;
         txn.XP_DATA.DETAILS.INSTRUMENT_CODE_TYPE.s = 'EXMN';

         txn.XP_DATA.DETAILS.AVG_GROSS_PRICE_NOTIFIED.f64
             = {double}rds.FIX_IN_QUEUE[0].MESSAGE.6.s;

         txn.XP_DATA.DETAILS.GROSS_PRICE_LOCAL.f64
             = {double}rds.FIX_IN_QUEUE[0].MESSAGE.31.s;

         txn.XP_DATA.DETAILS.ORDER_ID.s = rds.FIX_IN_QUEUE[0].MESSAGE.37.s;

         txn.XP_DATA.DETAILS.QUANTITY_NOTIFIED.f64
             = {double}rds.FIX_IN_QUEUE[0].MESSAGE.14.s;

         txn.XP_DATA.DETAILS.DEALING_CAPACITY.b
             = ByteAt(rds.FIX_IN_QUEUE[0].MESSAGE.47.s, 0);

         txn.XP_DATA.DETAILS.EXECUTION_ID.s = rds.FIX_IN_QUEUE[0].MESSAGE.19.s;

         txn.XP_DATA.DETAILS.ORIGINATOR_ORDER_ID.s
             = rds.FIX_IN_QUEUE[0].MESSAGE.11.s;

         quantity#d = {double}rds.FIX_IN_QUEUE[0].MESSAGE.38.s;
         txn.XP_DATA.DETAILS.QUANTITY.f64 = quantity#d;

         symbol#s = rds.FIX_IN_QUEUE[0].MESSAGE.55.s;
         txn.XP_DATA.DETAILS.ALT_INSTRUMENT_CODE.s = symbol#s;

         txn.XP_DATA.DETAILS.INSTRUMENT_CODE.s = symbol#s;
         symbolSuffix#s = rds.FIX_IN_QUEUE[0].MESSAGE.65.s;
         If
         (
           symbolSuffix#s != ''
         ,
           txn.XP_DATA.DETAILS.INSTRUMENT_CODE.s += ' ';
           txn.XP_DATA.DETAILS.INSTRUMENT_CODE.s += symbolSuffix#s
         ,
           ''
         );

         If
         (
           rds.FIX_IN_QUEUE[0].MESSAGE.58.s != ''
         ,
           txn.XP_DATA.DETAILS.EVENT_TEXT.s = rds.FIX_IN_QUEUE[0].MESSAGE.58.s
         ,
           ''
         );

         txn.XP_DATA.DETAILS.EXEC_DATETIME.s
             = Replace$(rds.FIX_IN_QUEUE[0].MESSAGE.60.s, '-', ' ');
         txn.XP_DATA.DETAILS.EXEC_DATETIME.s += '.000000 -0400s';

         deliverToCompID#s = rds.FIX_IN_QUEUE[0].MESSAGE.128.s;
         If
         (
           deliverToCompID#s != ''
         ,
           txn.XP_DATA.DETAILS.XP_PT_DATA.s = '128=' + deliverToCompID#s + ';'
         ,
           ''
         );

         ordType#s = rds.FIX_IN_QUEUE[0].MESSAGE.40.s;
         txn.XP_DATA.DETAILS.PRICE_TYPE.s = XRefPriceType$(ordType#s);
         If
         (
           ordType#s == '2' || ordType#s == '4'
         ,
           txn.XP_DATA.DETAILS.LIMIT_PRICE.f64
               = {double}rds.FIX_IN_QUEUE[0].MESSAGE.44.s
         ,
           1
         );

         txn.XP_DATA.DETAILS.EXPIRY_TYPE.s
             = XRefExpiryType$(rds.FIX_IN_QUEUE[0].MESSAGE.59.s);

         side#s = rds.FIX_IN_QUEUE[0].MESSAGE.54.s;
         txn.XP_DATA.DETAILS.BUY_SELL.b = ByteAt(XRefBuySell$(side#s), 0);
         txn.XP_DATA.DETAILS.BUY_SELL_QUALIFIER.b
             = ByteAt(XRefBuySellQualifier$(side#s), 0);

         orderStatus#s = rds.FIX_IN_QUEUE[0].MESSAGE.39.s;
         txn.XP_DATA.DETAILS.ORDER_STATE.b
             = ByteAt(XRefOrderState$(orderStatus#s), 0);
         txn.XP_DATA.DETAILS.ORDER_PENDING_STATE.b
             = ByteAt(XRefOrderPendingState$(orderStatus#s), 0);
         If
         (
           txn.XP_DATA.DETAILS.ORDER_PENDING_STATE.b == 0
         ,
           txn.XP_DATA.DETAILS.ORDER_PENDING_STATE.b = 32
         ,
           1
         );

         Sds_Remove('txn.XP_DATA.DETAILS.MESSAGE')
       ,
         1
       )",

      !======================================================================
      ! 
      ! Remaining fieldExprs Follow
      ! 
      !======================================================================

      !------------------------------------------------------------------------
      ! Trade Id: Prepend Date to insure Id uniqueness.  Append the Buy/Sell 
      ! to insure uniqueness for Agency cross trades because we receive
      ! both sides of the trade with same id.
      ! For new trades, Id is in field 17.  For unnotifies, ExecutionID maps to
      ! tag19, ExecRefId.  For renotifies, perform Prepend and Append on both
      ! tag17 and tag19 as EXECUTION_ID and OLD_EXECUTION_ID, respectively.
      ! Use TransactTime (tag60) rather than 'Today' in trade Id if available,
      ! else use tag75 (TradeDate). Allows incoming execution amends and
      ! cancels after today.
      ! date from tag 60 is GMT date
      ! date from tag 75 is local date at trade originator
      ! Date$() is the local date here
      ! tag 60 is preferred source of date because it is GMT
      !------------------------------------------------------------------------

      "If
       (
           rds.FIX_IN_QUEUE.MESSAGE.60.s == ''
       ,
           If
           (
               rds.FIX_IN_QUEUE.MESSAGE.75.s == ''
           ,
               date#s = Left$(rds.FIX_IN_QUEUE.MESSAGE.RX_TIME.s, 8)
           ,
               date#s = rds.FIX_IN_QUEUE.MESSAGE.75.s
           )
       ,
           date#s = Left$(rds.FIX_IN_QUEUE.MESSAGE.60.s, 8)
       );
       If
       (
           txn.XP_DATA.EVENT.EVENT_TYPE.s == 'Execution-notify'
       ,
           txn.XP_DATA.DETAILS.EXECUTION_ID.s = date#s + '_' + 
           rds.FIX_IN_QUEUE.MESSAGE.17.s + 
           If
           (
               rds.FIX_IN_QUEUE.MESSAGE.54.s == '1'
           ,
               'B'
           ,
               'S'
           )
       ,
           If
           (
               txn.XP_DATA.EVENT.EVENT_TYPE.s == 'Execution-unnotify'
           ,
               txn.XP_DATA.DETAILS.EXECUTION_ID.s = date#s + '_' +
               rds.FIX_IN_QUEUE.MESSAGE.19.s + 
               If
               (
                   rds.FIX_IN_QUEUE.MESSAGE.54.s == '1'
               ,
                   'B'
               ,
                   'S'
               )
           ,
               If
               (
                   txn.XP_DATA.EVENT.EVENT_TYPE.s == 'Execution-renotify'
               ,
                   txn.XP_DATA.DETAILS.EXECUTION_ID.s = date#s + '_' +
                   rds.FIX_IN_QUEUE.MESSAGE.17.s +
                   If
                   (
                       rds.FIX_IN_QUEUE.MESSAGE.54.s == '1'
                   ,
                       'B'
                   ,
                       'S'
                   );
                   txn.XP_DATA.DETAILS.OLD_EXECUTION_ID.s = date#s + '_' +
                   rds.FIX_IN_QUEUE.MESSAGE.19.s +
                   If
                   (
                       rds.FIX_IN_QUEUE.MESSAGE.54.s == '1'
                   ,
                       'B'
                   ,
                       'S'
                   )
               ,
                   ''
               )
           )
       )",

      !----------------------------------------------------------------------
      ! Handle Canadian Instruments
      !----------------------------------------------------------------------
      "txn.XP_DATA[0].DETAILS[0].INSTRUMENT_CODE.s
         = CanadianInstr_Reply(txn.XP_DATA[0].DETAILS[0].INSTRUMENT_CODE.s,
                               rds.FIX_IN_QUEUE[0].MESSAGE.65.s);
       txn.XP_DATA[0].DETAILS[0].ALT_INSTRUMENT_CODE.s
         = CanadianInstr_Reply(txn.XP_DATA[0].DETAILS[0].ALT_INSTRUMENT_CODE.s,
                               rds.FIX_IN_QUEUE[0].MESSAGE.65.s)
      "
    )
}
     

skipMsgXLateExpr
{
    ! It's an apostrophe in a comment
    skipMsgXLateExpr "If
                      (
                        rds.FIX_IN_QUEUE[0].MESSAGE.35.s == '8' &&
                        rds.FIX_IN_QUEUE[0].MESSAGE.20.s == '1' && 
                        rds.FIX_IN_QUEUE[0].MESSAGE.32.s != '0'
                      ,
                        1
                      ,
                        0
                      )"
}


expression
{
    expression
    {
      xRefTables
      {
        BuySell
        {
            1    B
            2    S
            3    B
            4    S
            5    S
            6    S
        }

        BuySellQualifier
        {
            3    -
            4    +
            5    S
            6    X
        }

        PriceType
        {
            1    MKT
            2    LIM
            3    STP
            4    STL
            5    MKT
            7    LIM
            A    MKT
            B    LIM
            K    MKT
        }

        ExpiryType
        {
            0    GFD
            1    GTC
            3    IOC
            4    FOK
            6    GTD
        }

        OrderState
        {
            0    0
            1    0
            2    C
            3    0
            4    C
            5    0
            6    0
            8    R
            A    0
            C    E
            E    0
        }

        OrderPendingState
        {
            3    D
            6    C
            A    N
            E    A
        }
      }

      preExpression
      (
        !----------------------------------------------------------------------
        ! string CanadianInstr_Reply(instrument#s, symbolSuffix_FIX#s)
        !   At present, the US versions of OMAR & FTS (and our other servers)
        !   require instruments listed on Canadian exchanges to
        !   contain a special suffix.  This function adds that suffix
        !   to 'instrument#s', if it's not already present.
        !
        !   Furthermore, if 'symbolSuffix_FIX#s' is a
        !   non-empty-string, it will be added back into the returned
        !   instrument name first.
        !
        !   Typically, you'd pass tag 55 as 'instrument#s' and tag 65
        !   as 'symbolSuffix_FIX#s'.
        !----------------------------------------------------------------------
        "AddFn
         (
           'CanadianInstr_Reply'
         ,
           'SS'
         ,
           'instrument#s = p0;
            symbolSuffix_FIX#s = p1;
            If
            (
              symbolSuffix_FIX#s != \'\'
            ,
              symbolSuffixPos#i = In$(instrument#s, symbolSuffix_FIX#s);
              If
              (
                symbolSuffixPos#i < 0
              ,
                instrument#s += \'.\';
                instrument#s += symbolSuffix_FIX#s
              ,
                symbolSuffix_spaceDelimited#s = \' \';
                symbolSuffix_spaceDelimited#s += symbolSuffix_FIX#s;
                symbolSuffix_expectedDelimiter#s = \'.\';
                symbolSuffix_expectedDelimiter#s += symbolSuffix_FIX#s;
                instrument#s = Replace$(instrument#s,
                                        symbolSuffix_spaceDelimited#s,
                                        symbolSuffix_expectedDelimiter#s)
              )
            , 
              \'\'
            );

            If
            (
              Right$(instrument#s, 3) == \'.CA\'
            ,
              instrument#s
            ,
              instrument#s += \'.CA\'
            )'
         )"
      )
    }
}


! EOF
